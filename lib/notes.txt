import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:url_launcher/url_launcher.dart';

class ResultScreen extends StatefulWidget {
  const ResultScreen({Key? key, required this.username}) : super(key: key);

  final String username;

  @override
  State<ResultScreen> createState() => _ResultScreenState();
}

class _ResultScreenState extends State<ResultScreen> {
  String fullName = '';
  List<dynamic> activities = [];

  @override
  void initState() {
    super.initState();
    fetchRecentActivities();
    fetchUserProfile();
  }

  Future<void> fetchUserProfile() async {
    final response = await http.get(
      Uri.parse('https://api.github.com/users/${widget.username}'),
    );

    if (response.statusCode == 200) {
      final userData = json.decode(response.body);
      setState(() {
        fullName = userData['name'] ?? widget.username;
      });
    } else {
      print('Failed to fetch user profile: ${response.statusCode}');
    }
  }

  Future<void> fetchRecentActivities() async {
    final response = await http.get(
      Uri.parse('https://api.github.com/users/${widget.username}/events'),
    );

    if (response.statusCode == 200) {
      setState(() {
        activities = json.decode(response.body);
      });
    } else {
      print('Failed to fetch activities: ${response.statusCode}');
    }
  }

  Future<void> _launchUserProfile() async {
    final url = 'https://github.com/${widget.username}';
    if (await canLaunch(url)) {
      await launch(url);
    } else {
      throw 'Could not launch $url';
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Column(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          SafeArea(
            child: Container(
              padding: const EdgeInsets.all(10),
              alignment: Alignment.center,
              child: const Text(
                'GITSPY',
                style: TextStyle(
                  fontSize: 32,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ),
          ),
          Container(
            padding: const EdgeInsets.all(10),
            alignment: Alignment.center,
            child: Row(
              mainAxisAlignment: MainAxisAlignment.start,
              children: [
                CircleAvatar(
                  radius: 35,
                  backgroundImage: NetworkImage(
                    'https://avatars.githubusercontent.com/${widget.username}',
                  ),
                ),
                const SizedBox(width: 10),
                InkWell(
                  onTap: _launchUserProfile,
                  child: Row(
                    children: [
                      Text(
                        fullName,
                        style: const TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      Transform.rotate(
                        angle: -45 * 0.0174533, // Convert degrees to radians
                        child: const Icon(
                          Icons.arrow_forward,
                          size: 14,
                          color: Colors.purple,
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
          Expanded(
            child: ListView.builder(
              itemCount: activities.length,
              itemBuilder: (context, index) {
                final activity = activities[index];
                return ListTile(
                  title: Text(activity['type']),
                  subtitle: Text(activity['repo']['name']),
                  // Add more details as needed
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}
